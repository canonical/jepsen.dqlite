name: Dqlite Jepsen tests

on:
  push:
  pull_request:
  schedule:
    - cron: "0 */1 * * *"
  workflow_dispatch:
    inputs:
      raftRepo:
        description: 'Raft Repo'
        required: true
        default: 'https://github.com/Canonical/raft.git'
      raftBranch:
        description: 'Raft Branch'
        required: true
        default: 'master'
      dqliteRepo:
        description: 'Dqlite Repo'
        required: true
        default: 'https://github.com/Canonical/dqlite.git'
      dqliteBranch:
        description: 'Dqlite Branch'
        required: true
        default: 'master'

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        workload:
          - append
          - set
          - bank
        nemesis:
          - partition
          - kill
          - stop
          - disk
          - member
          - partition,kill,stop
          - partition,kill,disk
          - partition,kill,member
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Jepsen (lein project) dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-clojure-${{ hashFiles('**/project.clj') }}
        restore-keys: |
          ${{ runner.os }}-clojure

    - name: Install Go
      uses: actions/setup-go@v3

    - name: Setup environment
      timeout-minutes: 15
      run: |
        sudo apt update
        sudo apt install -y gnuplot libsqlite3-dev libuv1-dev liblz4-dev libjna-java graphviz leiningen build-essential
        printf core | sudo tee /proc/sys/kernel/core_pattern

    - name: Install libbacktrace
      run: |
        git clone https://github.com/ianlancetaylor/libbacktrace --depth 1
        cd libbacktrace
        autoreconf -i
        ./configure
        make -j4
        sudo make install
        sudo ldconfig
        cd ..

    - name: Build raft
      env:
        RAFT_REPO: 'https://github.com/Canonical/raft.git'
        RAFT_BRANCH: 'master'
      run: |
          git clone --branch ${{ inputs.raftBranch || env.RAFT_BRANCH }} --depth 1 ${{ inputs.raftRepo || env.RAFT_REPO }}
          cd raft
          git log -n 1
          autoreconf -i
          ./configure --enable-debug --enable-backtrace
          make -j4
          sudo make install
          cd ..

    - name: Build dqlite
      env:
        DQLITE_REPO: 'https://github.com/Canonical/dqlite.git'
        DQLITE_BRANCH: 'master'
      run: |
          git clone --branch ${{ inputs.dqliteBranch || env.DQLITE_BRANCH }} --depth 1 ${{ inputs.dqliteRepo || env.DQLITE_REPO }}
          cd dqlite
          git log -n 1
          autoreconf -i
          ./configure --enable-debug --enable-backtrace
          make -j4
          sudo make install
          cd ..

    - name: Test
      env:
        CGO_LDFLAGS_ALLOW: "-Wl,-z,now"
        LD_LIBRARY_PATH: "/usr/local/lib"
        GOPROXY: "direct"
      timeout-minutes: 8
      run: |
        sudo ldconfig
        go get golang.org/x/sync/semaphore
        go get -tags libsqlite3 github.com/canonical/go-dqlite/app
        go build -tags libsqlite3 -o resources/app resources/app.go
        sudo ufw disable
        sudo systemctl stop ufw.service
        sudo ./resources/network.sh setup 5
        if test ${{ matrix.workload }} = set && test ${{ matrix.nemesis }} = stop; then echo 120 >time-limit; else echo 240 >time-limit; fi
        lein run test --no-ssh --binary $(pwd)/resources/app --workload ${{ matrix.workload }} --time-limit $(cat time-limit) --nemesis ${{ matrix.nemesis }} --rate 100
        sudo ./resources/network.sh teardown 5

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: jepsen-data-${{ matrix.workload }}-${{ matrix.nemesis }}
        path: store/dqlite*
