name: Callable Dqlite Jepsen tests

on:
  workflow_dispatch:
    inputs:
      raft-repo:
        description: 'Raft Repo'
        default: 'https://github.com/Canonical/raft.git'
      raft-branch:
        description: 'Raft Branch'
        default: 'master'
      dqlite-repo:
        description: 'Dqlite Repo'
        default: 'https://github.com/Canonical/dqlite.git'
      dqlite-branch:
        description: 'Dqlite Branch'
        default: 'master'
      workloads:
        description: 'Jepsen workloads as JSON, e.g. [ append, bank ]'
        required: true
      nemeses:
        description: "Jepsen nemesis as JSON, e.g. [ 'pause,disk' ]"
        required: true
      disk:
        description: "Enable or disable dqlite's disk-mode e.g. [ '0', '1' ]"
        required: true
      cli-opts:
        description: 'Jepsen cli opts, e.g. --node-targets primaries'
        required: false
  workflow_call:
    inputs:
      jepsen-dqlite-repo:
        type: string
        required: false
        default: https://github.com/canonical/jepsen.dqlite.git
      jepsen-dqlite-branch:
        type: string
        required: false
        default: master
      jepsen-repo:
        type: string
        required: false
      jepsen-branch:
        type: string
        required: false
      raft-repo:
        type: string
        required: false
      raft-branch:
        type: string
        required: false
      dqlite-repo:
        type: string
        required: false
      dqlite-branch:
        type: string
        required: false
      workloads:
        type: string
        required: true
      nemeses:
        type: string
        required: true
      disk:
        type: string
        required: true
      cli-opts:
        type: string
        required: false

jobs:
  test:
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.jepsen-dqlite-repo || github.repository }}
        ref: ${{ inputs.jepsen-dqlite-branch || github.ref }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Jepsen (lein project) dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-clojure-${{ hashFiles('**/project.clj') }}
        restore-keys: |
          ${{ runner.os }}-clojure

    - name: Install Go
      uses: actions/setup-go@v3

    - name: Setup environment
      timeout-minutes: 15
      run: |
        sudo apt update
        sudo apt install -y gnuplot libsqlite3-dev libuv1-dev liblz4-dev libjna-java graphviz leiningen build-essential
        printf core | sudo tee /proc/sys/kernel/core_pattern

    - name: Install local Jepsen
      if: ${{ inputs.jepsen-repo && inputs.jepsen-branch }}
      run: |
        git clone --branch ${{ inputs.jepsen-branch }} --depth 1 ${{ inputs.jepsen-repo }}
        cd jepsen/jepsen
        git log -n 1
        lein install
        cd ../..

    - name: Install libbacktrace
      run: |
        git clone https://github.com/ianlancetaylor/libbacktrace --depth 1
        cd libbacktrace
        autoreconf -i
        ./configure
        make -j4
        sudo make install
        sudo ldconfig
        cd ..

    - name: Build raft
      run: |
        git clone --branch ${{ inputs.raft-branch || 'master' }} --depth 1 ${{ inputs.raft-repo || 'https://github.com/canonical/raft' }}
        cd raft
        git log -n 1
        autoreconf -i
        ./configure --enable-debug --enable-backtrace
        make -j4
        sudo make install
        cd ..

    - name: Build dqlite
      run: |
        git clone --branch ${{ inputs.dqlite-branch || 'master' }} --depth 1 ${{ inputs.dqlite-repo || 'https://github.com/canonical/dqlite' }}
        cd dqlite
        git log -n 1
        autoreconf -i
        ./configure --enable-debug --enable-backtrace
        make -j4
        sudo make install
        cd ..

    - name: Build app for Jepsen
      with
      env:
        LD_LIBRARY_PATH: "/usr/local/lib"
      run: |
        sudo ldconfig
        go get golang.org/x/sync/semaphore
        go get -tags libsqlite3 github.com/canonical/go-dqlite/app
        go build -tags libsqlite3 -o resources/app resources/app.go

    - name: Shut down firewall
        sudo ufw disable
        sleep 0.200
        sudo systemctl stop ufw.service

    - name: Test
      uses: ./.github/workflows/test-only.yml
      with:
        workloads: ${{ inputs.workloads }}
        nemeses: ${{ inputs.nemeses }}
        disk: ${{ inputs.disk }}
